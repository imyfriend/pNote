package iyf.exdroid.support.common.utils;

import android.os.Environment;

import java.io.File;
import java.io.IOException;

@SuppressWarnings({"WeakerAccess", "unused"})
public final class TraceUtils {
    private static final String TAG = "TraceUtils";

    static {
        LogUtils.setDebug(TAG, true);
    }

    public static void findCaller() {
        final Throwable mThrowable = new Throwable();
        final StackTraceElement[] elements = mThrowable.getStackTrace();
        final int len = elements.length;
        StackTraceElement item;
        for (int i = 1; i < len; i++) {
            item = elements[i];
            LogUtils.d(TAG, "StackTrace: " +
                    item.getClassName() + "." + item.getMethodName()
                    + " ---" + item.getLineNumber() + " line");
        }
    }

    private final static String sTab = " ";
    private final static String sLineSeparator = System.getProperty(
            "line.separator", "\n");

    private final static String CALL_FLAG = " is called by ";
    private final static String RETURN_FLAG = " returns to ";

    private final static String ENTER_BEGIN = "+++ [";
    private final static String ENTER_END = "]";
    private final static String LEAVE_BEGIN = "--- [";
    private final static String LEAVE_END = "]";

    public static String printReverseStackTrace() {
        StringBuilder tabs = new StringBuilder("");
        StringBuilder logs = new StringBuilder("");

        StackTraceElement item;
        StackTraceElement[] elements = Thread.currentThread().getStackTrace();
        int maxIndex = elements.length - 1;
        int cnt = 0;
        for (int i = maxIndex; i > 0; i--) {
            item = elements[i];

            if (item.isNativeMethod()) {
                continue;
            }

            if (item.getClassName().equals(TraceUtils.class.getName())) {
                StackTraceElement tmp = elements[i + 1];
                logs.insert(0, " StackTrace: (" + tmp.getClassName() + "."
                        + tmp.getMethodName() + ")" + sLineSeparator);
                continue;
            }

            logs.append(tabs).append(cnt == 0 ? " " : " -> ").append(item.toString()).append(sLineSeparator);
            tabs.append(sTab);
            cnt++;
        }

        //System.out.println(logs);

        return logs.toString();
    }

    public static String printStackTrace() {
        StringBuilder tabs = new StringBuilder("");
        StringBuilder logs = new StringBuilder("");

        StackTraceElement[] elements = Thread.currentThread().getStackTrace();

        StackTraceElement callElement = null;
        int cnt = 0;
        for (StackTraceElement item : elements) {
            if (item.getClassName().equals(Thread.class.getName())) {
                continue;
            }

            if (item.isNativeMethod()) {
                continue;
            }

            if (item.getClassName().equals(TraceUtils.class.getName())) {
                continue;
            } else if (null == callElement) {
                callElement = item;
                logs.insert(0, " StackTrace: (" + callElement.getClassName() + "."
                        + callElement.getMethodName() + ")" + sLineSeparator);
            }

            logs.append(tabs).append(cnt == 0 ? " " : " <- ").append(item.toString()).append(sLineSeparator);
            tabs.append(sTab);
            cnt++;
        }

        //System.out.println(logs);
        return logs.toString();
    }

    public static String getFunctionName() {
        StackTraceElement[] sts = Thread.currentThread().getStackTrace();
        if (sts == null) {
            return "";
        }
        for (StackTraceElement st : sts) {
            if (st.isNativeMethod()) {
                continue;
            }

            if (st.getClassName().equals(Thread.class.getName())) {
                continue;
            }

            if (st.getClassName().equals(TraceUtils.class.getName())) {
                continue;
            }

            return "[ " + Thread.currentThread().getName() + ": "
                    + st.getFileName() + ":" + st.getLineNumber() + " "
                    + st.getMethodName() + " ]";
        }
        return "";
    }

    public static String enter(Object... params) {
        return enterWithComment(null, params);
    }

    @SuppressWarnings({"SameParameterValue", "WeakerAccess"})
    public static String enterWithComment(String msg, Object... params) {
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();

        StackTraceElement calledElement = null;
        StackTraceElement callElement = null;

        for (StackTraceElement st : stackTraceElements) {
            //System.out.println(st.getClassName() + "." + st.getMethodName());

            if (null == calledElement) {
                calledElement = st;
            } else {
                callElement = st;
                break;
            }
        }

        StringBuilder logs = new StringBuilder(ENTER_BEGIN);
        if (null != calledElement) {
            logs.append(calledElement.getClassName()).append(".").append(calledElement.getMethodName()).append("(");
        }

        StringBuilder builder = new StringBuilder();
        if (params != null && params.length > 0) {
            builder.append(getShortParams(params[0]));
            for (int cnt = 1; cnt < params.length; cnt++) {
                builder.append(", ").append(getShortParams(params[cnt]));
            }
            logs.append(builder);
        }
        logs.append(")");

        if (null != callElement) {
            logs.append(CALL_FLAG).append(callElement.getClassName()).append(".").append(callElement.getMethodName()).append("()").append(" @").append(callElement.getFileName()).append(":").append(callElement.getLineNumber()).append(" #").append(Thread.currentThread().getName());
        }

        logs.append(msg != null ? msg : "");
        logs.append(ENTER_END);

        return logs.toString();
    }

    public static String leave() {
        return leaveWithComment(null);
    }

    public static String leave(Object result) {
        return leaveWithComment(result);
    }

    @SuppressWarnings("WeakerAccess")
    public static String leaveWithComment(Object result) {
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();

        StackTraceElement calledElement = null;
        StackTraceElement callElement = null;

        for (StackTraceElement st : stackTraceElements) {
            //System.out.println(st.getClassName() + "." + st.getMethodName());

            if (null == calledElement) {
                calledElement = st;
            } else {
                callElement = st;
                break;
            }
        }

        StringBuilder logs = new StringBuilder(LEAVE_BEGIN);
        if (null != calledElement) {
            logs.append(calledElement.getClassName()).append(".").append(calledElement.getMethodName()).append("() ret{").append(result == null ? "" : getShortParams(result)).append("}");
        }

        if (null != callElement) {
            logs.append(RETURN_FLAG).append(callElement.getClassName()).append(".").append(callElement.getMethodName()).append("()").append(" @").append(callElement.getFileName()).append(":").append(callElement.getLineNumber()).append(" #").append(Thread.currentThread().getName());
        }

        logs.append(LEAVE_END);

        return logs.toString();
    }


    private static String getShortParams(Object param) {
        if (param == null) {
            return "null";
        }

        try {
            param.getClass().getDeclaredMethod("toString");
        } catch (NoSuchMethodException e) {
            return param.getClass().getSimpleName() + '@'
                    + Integer.toHexString(param.hashCode());
        }
        return String.valueOf(param);
    }

    /**
     * Returns info about the calling method. The {@code depth} parameter controls how far back to
     * go. For example, if foo() calls bar(), and bar() calls getCaller(0), it returns info about
     * bar(). If bar() instead called getCaller(1), it would return info about foo(). And so on.
     * <p>
     * NOTE: This method retrieves the current thread's stack trace, which adds runtime overhead.
     * It should only be used in production where necessary to gather context about an error or
     * unexpected event (e.g. the {@link Assert} class uses it).
     *
     * @return stack frame information for the caller (if found); otherwise {@code null}.
     */
    public static StackTraceElement getCaller(int depth) {
        // If the signature of this method is changed, proguard.flags must be updated!
        if (depth < 0) {
            throw new IllegalArgumentException("depth cannot be negative");
        }
        StackTraceElement[] trace = Thread.currentThread().getStackTrace();
        if (trace == null || trace.length < (depth + 2)) {
            return null;
        }
        // The stack trace includes some methods we don't care about (e.g. this method).
        // Walk down until we find this method, and then back up to the caller we're looking for.
        for (int i = 0; i < trace.length - 1; i++) {
            String methodName = trace[i].getMethodName();
            if ("getCaller".equals(methodName)) {
                return trace[i + depth + 1];
            }
        }
        // Never found ourself in the stack?!
        return null;
    }

    /**
     * Logs the name of the method that is currently executing, e.g. "MyActivity.onCreate". This is
     * useful for surgically adding logs for tracing execution while debugging.
     * <p>
     * NOTE: This method retrieves the current thread's stack trace, which adds runtime overhead.
     * However, this method is only executed on eng builds if DEBUG logs are loggable.
     */
    public static void logCurrentMethod(String tag) {
        StackTraceElement caller = getCaller(1);
        if (caller == null) {
            return;
        }
        String className = caller.getClassName();
        // Strip off the package name
        int lastDot = className.lastIndexOf('.');
        if (lastDot > -1) {
            className = className.substring(lastDot + 1);
        }
        LogUtils.d(tag, className + "." + caller.getMethodName());
    }

    public static File getDebugFile(final String fileName, final boolean create) {
        final File dir = getDebugFilesDir();
        final File file = new File(dir, fileName);
        if (create && file.exists()) {
            //noinspection ResultOfMethodCallIgnored
            file.delete();
        }
        return file;
    }

    @SuppressWarnings("all")
    public static File getDebugFilesDir() {
        @SuppressWarnings("UnnecessaryLocalVariable")
        final File dir = Environment.getExternalStorageDirectory();
        return dir;
    }

    /**
     * Debugging
     */
    public static void writeHprofDataToFile(String fileName){
        String filename = Environment.getExternalStorageDirectory() + File.separator + fileName;
        try {
            android.os.Debug.dumpHprofData(filename);
        } catch (IOException ignored) {
        }
    }

}
